package typewriter

import (
	"fmt"
	"os"
	"strings"
	"text/template"
)

// Individual Typewriters register on init, keyed by name
var typeWriters = make(map[string]TypeWriter)

// Register allows template packages to make themselves known to a 'parent' package, usually in the init() func.
// Comparable to the approach taken by builtin image package for registration of image types (eg image/png).
// Your program will do something like:
//	import (
//		"github.com/clipperhouse/gen/templates"
//		_ "github.com/clipperhouse/gen/templates/projection"
//	)
func Register(tw TypeWriter) {
	if _, exists := typeWriters[tw.Name()]; exists {
		panic(fmt.Errorf("A TypeWriter by the name %s has already been registered", tw.Name()))
	}
	typeWriters[tw.Name()] = tw
}

type App struct {
	// All typewriter.Type found in the current directory.
	Types []Type
	// All typewriter.Typewriters registered on init.
	TypeWriters map[string]TypeWriter
}

// NewApp parses the current directory, collecting Types and their related information.
func NewApp(directive string) (App, error) {
	var app App

	typs, err := getTypes(directive)
	if err != nil {
		return app, err
	}

	app.Types = typs
	app.TypeWriters = typeWriters
	return app, nil
}

// WriteAll writes the generated code for all Types and TypeWriters in the App. Typically, this is a file.
func (a App) WriteAll() {
	// Validate them all, don't fail halfway
	for _, t := range a.Types {
		for _, tw := range a.TypeWriters {
			err := tw.Validate(t)
			if err != nil {
				fmt.Println(err)
				return
			}
		}
	}

	// Validated above, go ahead and write
	for _, t := range a.Types {
		for _, tw := range a.TypeWriters {
			writeFile(t, tw)
		}
	}
}

func writeFile(t Type, tw TypeWriter) {
	// TODO: write into a memory buffer by default, validate the ast before committing to file

	filename := fmt.Sprintf("%s_%s.go", strings.ToLower(t.LocalName()), tw.Name())
	w, err := os.Create(filename)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer w.Close()

	w.WriteString(`// This file was generated by typewriter

`)
	tw.WriteHeader(w, t)
	packageTmpl.Execute(w, t.Package.Name)
	importsTmpl.Execute(w, tw.Imports(t))
	tw.Write(w, t)
}

var packageTmpl = template.Must(template.New("package").Parse(`package {{.}}
`))

var importsTmpl = template.Must(template.New("imports").Parse(`{{if gt (len .) 0}}
import ({{range .}}
	"{{.}}"{{end}}
)
{{end}}
`))
